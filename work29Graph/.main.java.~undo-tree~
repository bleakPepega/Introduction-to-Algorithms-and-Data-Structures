(undo-tree-save-format-version . 1)
"bf2dd754e68d8b1a6ec7cc84fa500b42c9f18115"
[nil nil nil nil (25496 30279 439246 925000) 0 nil]
([nil nil ((#("r of roads." 0 11 (fontified t face font-lock-comment-face c-in-sws t)) . 598) (undo-tree-id594 . -11) (undo-tree-id595 . -11) (t 25495 12914 364768 917000)) nil (25496 30279 439244 980000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -577) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -578) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -579) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (#("/" 0 1 (fontified t c-in-sws t c-is-sws t)) . -580) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (#("/" 0 1 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . -581) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . -582) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (#("P" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -583) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (#("r" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -584) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (#("i" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -585) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (#("n" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -586) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (#("t" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -587) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -588) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (#("t" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -589) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (#("h" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -590) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -591) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -592) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (#("n" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -593) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (#("u" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -594) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (#("m" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -595) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (#("b" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -596) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -597) (undo-tree-id592 . -1) (undo-tree-id593 . -1) 598) nil (25496 30279 439233 842000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -574) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (#("
" 0 1 (fontified t)) . -575) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -576) (undo-tree-id550 . -1) (undo-tree-id551 . -1) 577) nil (25496 30279 439176 489000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -488) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (#("t" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -489) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (#("h" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -490) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -491) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -492) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (#("n" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -493) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (#("u" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -494) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (#("m" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -495) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (#("b" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -496) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -497) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (#("r" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -498) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -499) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (#("o" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -500) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (#("f" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -501) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -502) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (#("r" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -503) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (#("o" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -504) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (#("a" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -505) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (#("d" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -506) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (#("s" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -507) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (#("." 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -508) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) 509) nil (25496 30279 439161 326000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -467) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -468) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -469) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -470) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -471) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -472) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -473) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -474) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -475) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (#("/" 0 1 (fontified t c-is-sws t)) . -476) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#("/" 0 1 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . -477) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . -478) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (#("i" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -479) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#("n" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -480) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (#("c" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -481) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (#("r" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -482) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -483) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (#("m" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -484) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -485) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (#("n" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -486) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (#("t" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -487) (undo-tree-id500 . -1) (undo-tree-id501 . -1) 488) nil (25496 30279 439101 870000) 0 nil])
([nil nil ((#("// If there is a road between city i and city j," 0 1 (fontified t c-in-sws t c-is-sws t face font-lock-comment-delimiter-face) 1 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 3 48 (fontified t c-in-sws t face font-lock-comment-face)) . -419) (undo-tree-id458 . -48) (undo-tree-id459 . -48) 467) nil (25496 30279 439038 504000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -410) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -411) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -412) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -413) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -414) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -415) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -416) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -417) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -418) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) 419) nil (25496 30279 439030 724000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -283) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (#("c" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -284) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (#("o" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -285) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#("n" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -286) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("n" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -287) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -288) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("c" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -289) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("t" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -290) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (#("i" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -291) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("v" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -292) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("i" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -293) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#("t" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -294) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("y" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -295) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -296) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (#("m" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -297) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("a" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -298) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (#("t" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -299) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#("r" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -300) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (#("i" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -301) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (#("x" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -302) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (#("." 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -303) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) 304) nil (25496 30279 438978 702000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -266) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("
" 0 1 (fontified t)) . -267) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -268) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -269) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -270) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -271) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("/" 0 1 (fontified t c-in-sws t c-is-sws t)) . -272) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#("/" 0 1 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . -273) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . -274) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#("R" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -275) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -276) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("a" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -277) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("d" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -278) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -279) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("t" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -280) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (#("h" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -281) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -282) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) 283) nil (25496 30279 438783 791000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -226) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("u" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -227) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("m" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -228) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("b" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -229) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -230) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("r" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -231) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -232) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("o" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -233) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("f" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -234) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -235) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("r" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -236) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("o" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -237) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("a" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -238) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (#("d" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -239) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("s" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -240) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -241) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("t" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -242) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("o" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -243) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -244) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#("0" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -245) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("." 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -246) (undo-tree-id233 . -1) 247) nil (25496 30279 438658 686000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -205) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -206) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -207) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("/" 0 1 (fontified t c-in-sws t c-is-sws t)) . -208) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("/" 0 1 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . -209) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . -210) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("I" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -211) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("n" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -212) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("i" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -213) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("t" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -214) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("i" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -215) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("a" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -216) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("l" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -217) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("i" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -218) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("z" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -219) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -220) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -221) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("t" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -222) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("h" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -223) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -224) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -225) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) 226) nil (25496 30279 438519 825000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -204) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) 205) nil (25496 30279 438396 926000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -202) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("
" 0 1 (fontified t)) . -203) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) 204) nil (25496 30279 438386 550000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -151) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -152) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -153) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("n" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -154) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("u" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -155) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("m" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -156) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("b" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -157) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -158) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("r" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -159) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -160) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("o" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -161) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("f" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -162) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -163) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (#("c" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -164) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("i" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -165) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#("t" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -166) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -167) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -168) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -169) (undo-tree-id100 . -1) 170) nil (25496 30279 438361 407000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -136) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("
" 0 1 (fontified t)) . -137) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -138) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -139) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -140) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#(" " 0 1 (fontified t c-in-sws t c-is-sws t)) . -141) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("/" 0 1 (fontified t c-in-sws t c-is-sws t)) . -142) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("/" 0 1 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . -143) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . -144) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("R" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -145) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -146) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("a" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -147) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("d" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -148) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -149) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("t" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -150) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("." 0 1 (fontified t ws-butler-chg delete face font-lock-comment-face c-in-sws t)) . -151) (undo-tree-id45 . -1) 152) nil (25496 30279 437965 917000) 0 nil])
([nil current ((394 . 395) 136) nil (25496 30279 437832 75000) 0 nil])
nil
